from loader import dp
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


import subprocess


class Form(StatesGroup):
    start_process = State()


@dp.message_handler(text=['‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å'])
async def process_start_process_command(message: types.Message):
    await Form.start_process.set()
    await message.answer("‚ö°Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å.")


@dp.message_handler(state=Form.start_process)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['start_process'] = message.text

    start_process = subprocess.run(
        ["powershell.exe", "-Command", f"Start-Process -FilePath {data['start_process']}"], stdout=subprocess.PIPE)
    if start_process.returncode == 0:
        await message.answer(f"üïí –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {data['start_process']} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
    else:
        await message.answer(f"‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {data['start_process']} –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await state.finish()
